@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
using System;
using System.Linq;
using System.Windows.Forms;

namespace SudokuGame
{
    public partial class Form1 : Form
    {
        private int[,] board = new int[9, 9];

        public Form1()
        {
            InitializeComponent();
            InitializeDataGridView();
        }

        private void InitializeDataGridView()
        {
            dataGridView1.RowCount = 9;
            dataGridView1.ColumnCount = 9;

            for (int i = 0; i < 9; i++)
            {
                for (int j = 0; j < 9; j++)
                {
                    dataGridView1.Rows[i].Cells[j].Value = board[i, j] == 0 ? "" : board[i, j].ToString();
                    dataGridView1.Rows[i].Cells[j].Style.BackColor = System.Drawing.Color.White;
                }
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            GenerateNewPuzzle();
            InitializeDataGridView();
        }

        private void GenerateNewPuzzle()
        {
            // Clear the board
            board = new int[9, 9];

            // Generate a new Sudoku puzzle
            SolveSudoku(board);

            // Remove some numbers to create the puzzle
            Random rand = new Random();
            for (int i = 0; i < 40; i++)
            {
                int row = rand.Next(9);
                int col = rand.Next(9);
                board[row, col] = 0;
            }
        }

        private bool SolveSudoku(int[,] board)
        {
            for (int row = 0; row < 9; row++)
            {
                for (int col = 0; col < 9; col++)
                {
                    if (board[row, col] == 0)
                    {
                        for (int num = 1; num <= 9; num++)
                        {
                            if (IsSafe(board, row, col, num))
                            {
                                board[row, col] = num;

                                if (SolveSudoku(board))
                                {
                                    return true;
                                }

                                board[row, col] = 0;
                            }
                        }

                        return false;
                    }
                }
            }

            return true;
        }

        private bool IsSafe(int[,] board, int row, int col, int num)
        {
            for (int i = 0; i < 9; i++)
            {
                if (board[row, i] == num || board[i, col] == num)
                {
                    return false;
                }
            }

            int startRow = row - row % 3;
            int startCol = col - col % 3;

            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    if (board[startRow + i, startCol + j] == num)
                    {
                        return false;
                    }
                }
            }

            return true;
        }
    }
}
